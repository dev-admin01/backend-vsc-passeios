generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Position {
  id_position       Int @id @default(autoincrement())
  description       String @unique
  users             User[]
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now())

  @@map("positions")
}

model User {
   id_user          String @id @default(uuid())
   name             String @db.VarChar(256)
   email            String @unique @db.VarChar(254)
   password         String @db.VarChar(72)
   positions        Position @relation(fields: [id_position], references: [id_position])
   id_position      Int
   ddi              String? @db.VarChar(3)
   ddd              String? @db.VarChar(3)
   phone            String? @db.VarChar(10)
   created_at       DateTime @default(now())
   updated_at       DateTime @default(now())
 
   @@map("users") 
    orders orders[]
   orders_history orders_history[]
}

 model Service {
  id_service       Int @id @default(autoincrement())
  description      String 
  type             String @db.VarChar(1)
  price            Decimal @db.Decimal(10, 2)
  observation      String @db.Text
  created_at       DateTime @default(now())
  updated_at       DateTime @default(now())

  @@map("services")
  
  orders_service orders_service[]
}

model costumer {
  id_costumer   String   @id @default(uuid())
  nome          String
  cpf_cnpj      String? @unique
  passaporte    String?
  razao_social  String?
  nome_fantasia String?
  ddi           String?
  ddd           String?
  telefone      String?
  indicacao     String?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  orders orders[]
}

model orders {
  id_order    String   @id @default(uuid())
  order_number String?

  id_costumer String?
  costumer    costumer? @relation(fields: [id_costumer], references: [id_costumer])

  pre_name String?
  pre_email String?
  pre_ddi String?
  pre_ddd String?
  pre_phone String?

  id_user String
  user    User    @relation(fields: [id_user], references: [id_user])

  price      Decimal? @db.Decimal(10, 2)
  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  orders_service orders_service[]

  orders_history orders_history[]

  id_status_order Int?
  status          orders_status? @relation(fields: [id_status_order], references: [id_status_order])

  @@map("orders")
  order_documentation order_documentation[]
}

model orders_service {
  id_order_service Int    @id @default(autoincrement())

  id_order String
  order    orders @relation(fields: [id_order], references: [id_order], onDelete: Cascade)

  id_service Int
  service    Service @relation(fields: [id_service], references: [id_service])

  discount Decimal?

  suggested_date DateTime?
  price          Decimal? @db.Decimal(10, 2)

  created_at DateTime @default(now())
  updated_at DateTime @default(now())

  @@map("orders_service")
}

model order_documentation {
  id_order_documentation Int      @id @default(autoincrement())
  id_order               String
  order                  orders   @relation(fields: [id_order], references: [id_order], onDelete: Cascade)
  name                   String
  file                   Bytes?   
  created_at             DateTime @default(now())
  updated_at             DateTime @default(now())
  
  @@map("order_documentation")
}

model orders_history {
  id_order_history Int    @id @default(autoincrement())

  id_order String
  order    orders @relation(fields: [id_order], references: [id_order], onDelete: Cascade)

  id_user String
  user    User @relation(fields: [id_user], references: [id_user])

  created_at DateTime @default(now())

  @@map("orders_history")
}

model orders_status {
  id_status_order Int    @id @default(autoincrement())
  description     String
  created_at      DateTime @default(now())

  @@map("orders_status")
  orders orders[]
}